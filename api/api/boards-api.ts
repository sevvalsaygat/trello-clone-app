/* tslint:disable */
/* eslint-disable */
/**
 * Trello Clone API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Board } from '../model';
// @ts-ignore
import { BoardListResponse } from '../model';
// @ts-ignore
import { CreateBoardRequest } from '../model';
// @ts-ignore
import { ErrorResponse } from '../model';
// @ts-ignore
import { UpdateBoardRequest } from '../model';
/**
 * BoardsApi - axios parameter creator
 * @export
 */
export const BoardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a board by ID
         * @summary Delete By ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiAuthenticatedBoardsId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteApiAuthenticatedBoardsId', 'id', id)
            const localVarPath = `/api/authenticated/boards/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all boards on the API
         * @summary Get All
         * @param {number} page 
         * @param {number} limit 
         * @param {string} [expand] 
         * @param {string} [embed] 
         * @param {string} [q] 
         * @param {string} [userId] 
         * @param {string} [sort] 
         * @param {string} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAuthenticatedBoards: async (page: number, limit: number, expand?: string, embed?: string, q?: string, userId?: string, sort?: string, order?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getApiAuthenticatedBoards', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('getApiAuthenticatedBoards', 'limit', limit)
            const localVarPath = `/api/authenticated/boards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['_page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }

            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }

            if (embed !== undefined) {
                localVarQueryParameter['_embed'] = embed;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['_order'] = order;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a board by ID
         * @summary Get By ID
         * @param {string} id 
         * @param {string} [expand] 
         * @param {string} [embed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAuthenticatedBoardsId: async (id: string, expand?: string, embed?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiAuthenticatedBoardsId', 'id', id)
            const localVarPath = `/api/authenticated/boards/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }

            if (embed !== undefined) {
                localVarQueryParameter['_embed'] = embed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a board by ID
         * @summary Update by ID
         * @param {string} id 
         * @param {UpdateBoardRequest} [updateBoardRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiAuthenticatedBoardsId: async (id: string, updateBoardRequest?: UpdateBoardRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchApiAuthenticatedBoardsId', 'id', id)
            const localVarPath = `/api/authenticated/boards/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBoardRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a board
         * @summary Create
         * @param {CreateBoardRequest} [createBoardRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiAuthenticatedBoards: async (createBoardRequest?: CreateBoardRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/authenticated/boards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBoardRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BoardsApi - functional programming interface
 * @export
 */
export const BoardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BoardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a board by ID
         * @summary Delete By ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiAuthenticatedBoardsId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiAuthenticatedBoardsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all boards on the API
         * @summary Get All
         * @param {number} page 
         * @param {number} limit 
         * @param {string} [expand] 
         * @param {string} [embed] 
         * @param {string} [q] 
         * @param {string} [userId] 
         * @param {string} [sort] 
         * @param {string} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiAuthenticatedBoards(page: number, limit: number, expand?: string, embed?: string, q?: string, userId?: string, sort?: string, order?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BoardListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiAuthenticatedBoards(page, limit, expand, embed, q, userId, sort, order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a board by ID
         * @summary Get By ID
         * @param {string} id 
         * @param {string} [expand] 
         * @param {string} [embed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiAuthenticatedBoardsId(id: string, expand?: string, embed?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Board>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiAuthenticatedBoardsId(id, expand, embed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a board by ID
         * @summary Update by ID
         * @param {string} id 
         * @param {UpdateBoardRequest} [updateBoardRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchApiAuthenticatedBoardsId(id: string, updateBoardRequest?: UpdateBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Board>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchApiAuthenticatedBoardsId(id, updateBoardRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a board
         * @summary Create
         * @param {CreateBoardRequest} [createBoardRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiAuthenticatedBoards(createBoardRequest?: CreateBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Board>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiAuthenticatedBoards(createBoardRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BoardsApi - factory interface
 * @export
 */
export const BoardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BoardsApiFp(configuration)
    return {
        /**
         * Delete a board by ID
         * @summary Delete By ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiAuthenticatedBoardsId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiAuthenticatedBoardsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all boards on the API
         * @summary Get All
         * @param {number} page 
         * @param {number} limit 
         * @param {string} [expand] 
         * @param {string} [embed] 
         * @param {string} [q] 
         * @param {string} [userId] 
         * @param {string} [sort] 
         * @param {string} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAuthenticatedBoards(page: number, limit: number, expand?: string, embed?: string, q?: string, userId?: string, sort?: string, order?: string, options?: any): AxiosPromise<BoardListResponse> {
            return localVarFp.getApiAuthenticatedBoards(page, limit, expand, embed, q, userId, sort, order, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a board by ID
         * @summary Get By ID
         * @param {string} id 
         * @param {string} [expand] 
         * @param {string} [embed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAuthenticatedBoardsId(id: string, expand?: string, embed?: string, options?: any): AxiosPromise<Board> {
            return localVarFp.getApiAuthenticatedBoardsId(id, expand, embed, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a board by ID
         * @summary Update by ID
         * @param {string} id 
         * @param {UpdateBoardRequest} [updateBoardRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiAuthenticatedBoardsId(id: string, updateBoardRequest?: UpdateBoardRequest, options?: any): AxiosPromise<Board> {
            return localVarFp.patchApiAuthenticatedBoardsId(id, updateBoardRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a board
         * @summary Create
         * @param {CreateBoardRequest} [createBoardRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiAuthenticatedBoards(createBoardRequest?: CreateBoardRequest, options?: any): AxiosPromise<Board> {
            return localVarFp.postApiAuthenticatedBoards(createBoardRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BoardsApi - interface
 * @export
 * @interface BoardsApi
 */
export interface BoardsApiInterface {
    /**
     * Delete a board by ID
     * @summary Delete By ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApiInterface
     */
    deleteApiAuthenticatedBoardsId(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get all boards on the API
     * @summary Get All
     * @param {number} page 
     * @param {number} limit 
     * @param {string} [expand] 
     * @param {string} [embed] 
     * @param {string} [q] 
     * @param {string} [userId] 
     * @param {string} [sort] 
     * @param {string} [order] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApiInterface
     */
    getApiAuthenticatedBoards(page: number, limit: number, expand?: string, embed?: string, q?: string, userId?: string, sort?: string, order?: string, options?: AxiosRequestConfig): AxiosPromise<BoardListResponse>;

    /**
     * Get a board by ID
     * @summary Get By ID
     * @param {string} id 
     * @param {string} [expand] 
     * @param {string} [embed] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApiInterface
     */
    getApiAuthenticatedBoardsId(id: string, expand?: string, embed?: string, options?: AxiosRequestConfig): AxiosPromise<Board>;

    /**
     * Update a board by ID
     * @summary Update by ID
     * @param {string} id 
     * @param {UpdateBoardRequest} [updateBoardRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApiInterface
     */
    patchApiAuthenticatedBoardsId(id: string, updateBoardRequest?: UpdateBoardRequest, options?: AxiosRequestConfig): AxiosPromise<Board>;

    /**
     * Create a board
     * @summary Create
     * @param {CreateBoardRequest} [createBoardRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApiInterface
     */
    postApiAuthenticatedBoards(createBoardRequest?: CreateBoardRequest, options?: AxiosRequestConfig): AxiosPromise<Board>;

}

/**
 * BoardsApi - object-oriented interface
 * @export
 * @class BoardsApi
 * @extends {BaseAPI}
 */
export class BoardsApi extends BaseAPI implements BoardsApiInterface {
    /**
     * Delete a board by ID
     * @summary Delete By ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public deleteApiAuthenticatedBoardsId(id: string, options?: AxiosRequestConfig) {
        return BoardsApiFp(this.configuration).deleteApiAuthenticatedBoardsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all boards on the API
     * @summary Get All
     * @param {number} page 
     * @param {number} limit 
     * @param {string} [expand] 
     * @param {string} [embed] 
     * @param {string} [q] 
     * @param {string} [userId] 
     * @param {string} [sort] 
     * @param {string} [order] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public getApiAuthenticatedBoards(page: number, limit: number, expand?: string, embed?: string, q?: string, userId?: string, sort?: string, order?: string, options?: AxiosRequestConfig) {
        return BoardsApiFp(this.configuration).getApiAuthenticatedBoards(page, limit, expand, embed, q, userId, sort, order, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a board by ID
     * @summary Get By ID
     * @param {string} id 
     * @param {string} [expand] 
     * @param {string} [embed] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public getApiAuthenticatedBoardsId(id: string, expand?: string, embed?: string, options?: AxiosRequestConfig) {
        return BoardsApiFp(this.configuration).getApiAuthenticatedBoardsId(id, expand, embed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a board by ID
     * @summary Update by ID
     * @param {string} id 
     * @param {UpdateBoardRequest} [updateBoardRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public patchApiAuthenticatedBoardsId(id: string, updateBoardRequest?: UpdateBoardRequest, options?: AxiosRequestConfig) {
        return BoardsApiFp(this.configuration).patchApiAuthenticatedBoardsId(id, updateBoardRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a board
     * @summary Create
     * @param {CreateBoardRequest} [createBoardRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public postApiAuthenticatedBoards(createBoardRequest?: CreateBoardRequest, options?: AxiosRequestConfig) {
        return BoardsApiFp(this.configuration).postApiAuthenticatedBoards(createBoardRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

