/* tslint:disable */
/* eslint-disable */
/**
 * Trello Clone API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetApiAuthenticatedUsers200Response } from '../model';
// @ts-ignore
import { User } from '../model';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all users on the API
         * @summary Get All
         * @param {number} page 
         * @param {number} limit 
         * @param {string} [expand] 
         * @param {string} [embed] 
         * @param {string} [q] 
         * @param {string} [sort] 
         * @param {string} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAuthenticatedUsers: async (page: number, limit: number, expand?: string, embed?: string, q?: string, sort?: string, order?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getApiAuthenticatedUsers', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('getApiAuthenticatedUsers', 'limit', limit)
            const localVarPath = `/api/authenticated/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['_page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }

            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }

            if (embed !== undefined) {
                localVarQueryParameter['_embed'] = embed;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['_order'] = order;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a user by Id
         * @summary Get By ID
         * @param {string} id 
         * @param {string} [expand] 
         * @param {string} [embed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAuthenticatedUsersId: async (id: string, expand?: string, embed?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiAuthenticatedUsersId', 'id', id)
            const localVarPath = `/api/authenticated/users/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }

            if (embed !== undefined) {
                localVarQueryParameter['_embed'] = embed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all users on the API
         * @summary Get All
         * @param {number} page 
         * @param {number} limit 
         * @param {string} [expand] 
         * @param {string} [embed] 
         * @param {string} [q] 
         * @param {string} [sort] 
         * @param {string} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiAuthenticatedUsers(page: number, limit: number, expand?: string, embed?: string, q?: string, sort?: string, order?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiAuthenticatedUsers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiAuthenticatedUsers(page, limit, expand, embed, q, sort, order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a user by Id
         * @summary Get By ID
         * @param {string} id 
         * @param {string} [expand] 
         * @param {string} [embed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiAuthenticatedUsersId(id: string, expand?: string, embed?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiAuthenticatedUsersId(id, expand, embed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Get all users on the API
         * @summary Get All
         * @param {number} page 
         * @param {number} limit 
         * @param {string} [expand] 
         * @param {string} [embed] 
         * @param {string} [q] 
         * @param {string} [sort] 
         * @param {string} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAuthenticatedUsers(page: number, limit: number, expand?: string, embed?: string, q?: string, sort?: string, order?: string, options?: any): AxiosPromise<GetApiAuthenticatedUsers200Response> {
            return localVarFp.getApiAuthenticatedUsers(page, limit, expand, embed, q, sort, order, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a user by Id
         * @summary Get By ID
         * @param {string} id 
         * @param {string} [expand] 
         * @param {string} [embed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAuthenticatedUsersId(id: string, expand?: string, embed?: string, options?: any): AxiosPromise<User> {
            return localVarFp.getApiAuthenticatedUsersId(id, expand, embed, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - interface
 * @export
 * @interface UsersApi
 */
export interface UsersApiInterface {
    /**
     * Get all users on the API
     * @summary Get All
     * @param {number} page 
     * @param {number} limit 
     * @param {string} [expand] 
     * @param {string} [embed] 
     * @param {string} [q] 
     * @param {string} [sort] 
     * @param {string} [order] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getApiAuthenticatedUsers(page: number, limit: number, expand?: string, embed?: string, q?: string, sort?: string, order?: string, options?: AxiosRequestConfig): AxiosPromise<GetApiAuthenticatedUsers200Response>;

    /**
     * Get a user by Id
     * @summary Get By ID
     * @param {string} id 
     * @param {string} [expand] 
     * @param {string} [embed] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getApiAuthenticatedUsersId(id: string, expand?: string, embed?: string, options?: AxiosRequestConfig): AxiosPromise<User>;

}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI implements UsersApiInterface {
    /**
     * Get all users on the API
     * @summary Get All
     * @param {number} page 
     * @param {number} limit 
     * @param {string} [expand] 
     * @param {string} [embed] 
     * @param {string} [q] 
     * @param {string} [sort] 
     * @param {string} [order] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getApiAuthenticatedUsers(page: number, limit: number, expand?: string, embed?: string, q?: string, sort?: string, order?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getApiAuthenticatedUsers(page, limit, expand, embed, q, sort, order, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a user by Id
     * @summary Get By ID
     * @param {string} id 
     * @param {string} [expand] 
     * @param {string} [embed] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getApiAuthenticatedUsersId(id: string, expand?: string, embed?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getApiAuthenticatedUsersId(id, expand, embed, options).then((request) => request(this.axios, this.basePath));
    }
}

