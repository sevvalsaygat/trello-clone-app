/* tslint:disable */
/* eslint-disable */
/**
 * Trello Clone API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateTaskRequest } from '../model';
// @ts-ignore
import { ErrorResponse } from '../model';
// @ts-ignore
import { Task } from '../model';
// @ts-ignore
import { TaskListResponse } from '../model';
// @ts-ignore
import { UpdateTaskRequest } from '../model';
/**
 * TasksApi - axios parameter creator
 * @export
 */
export const TasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a task by Id
         * @summary Delete By ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiAuthenticatedTasksId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteApiAuthenticatedTasksId', 'id', id)
            const localVarPath = `/api/authenticated/tasks/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all tasks on the API
         * @summary Get All
         * @param {number} page 
         * @param {number} limit 
         * @param {string} [expand] 
         * @param {string} [embed] 
         * @param {string} [q] 
         * @param {string} [boardMemberId] 
         * @param {string} [boardColumnId] 
         * @param {string} [sort] 
         * @param {string} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAuthenticatedTasks: async (page: number, limit: number, expand?: string, embed?: string, q?: string, boardMemberId?: string, boardColumnId?: string, sort?: string, order?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getApiAuthenticatedTasks', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('getApiAuthenticatedTasks', 'limit', limit)
            const localVarPath = `/api/authenticated/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['_page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }

            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }

            if (embed !== undefined) {
                localVarQueryParameter['_embed'] = embed;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (boardMemberId !== undefined) {
                localVarQueryParameter['boardMemberId'] = boardMemberId;
            }

            if (boardColumnId !== undefined) {
                localVarQueryParameter['boardColumnId'] = boardColumnId;
            }

            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['_order'] = order;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a task by Id
         * @summary Get By ID
         * @param {string} id 
         * @param {string} [expand] 
         * @param {string} [embed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAuthenticatedTasksId: async (id: string, expand?: string, embed?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiAuthenticatedTasksId', 'id', id)
            const localVarPath = `/api/authenticated/tasks/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }

            if (embed !== undefined) {
                localVarQueryParameter['_embed'] = embed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a task by Id
         * @summary Update By ID
         * @param {string} id 
         * @param {UpdateTaskRequest} [updateTaskRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiAuthenticatedTasksId: async (id: string, updateTaskRequest?: UpdateTaskRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchApiAuthenticatedTasksId', 'id', id)
            const localVarPath = `/api/authenticated/tasks/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTaskRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new task
         * @summary Create
         * @param {CreateTaskRequest} [createTaskRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiAuthenticatedTasks: async (createTaskRequest?: CreateTaskRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/authenticated/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTaskRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TasksApi - functional programming interface
 * @export
 */
export const TasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TasksApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a task by Id
         * @summary Delete By ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiAuthenticatedTasksId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiAuthenticatedTasksId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all tasks on the API
         * @summary Get All
         * @param {number} page 
         * @param {number} limit 
         * @param {string} [expand] 
         * @param {string} [embed] 
         * @param {string} [q] 
         * @param {string} [boardMemberId] 
         * @param {string} [boardColumnId] 
         * @param {string} [sort] 
         * @param {string} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiAuthenticatedTasks(page: number, limit: number, expand?: string, embed?: string, q?: string, boardMemberId?: string, boardColumnId?: string, sort?: string, order?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiAuthenticatedTasks(page, limit, expand, embed, q, boardMemberId, boardColumnId, sort, order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a task by Id
         * @summary Get By ID
         * @param {string} id 
         * @param {string} [expand] 
         * @param {string} [embed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiAuthenticatedTasksId(id: string, expand?: string, embed?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiAuthenticatedTasksId(id, expand, embed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a task by Id
         * @summary Update By ID
         * @param {string} id 
         * @param {UpdateTaskRequest} [updateTaskRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchApiAuthenticatedTasksId(id: string, updateTaskRequest?: UpdateTaskRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchApiAuthenticatedTasksId(id, updateTaskRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new task
         * @summary Create
         * @param {CreateTaskRequest} [createTaskRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiAuthenticatedTasks(createTaskRequest?: CreateTaskRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiAuthenticatedTasks(createTaskRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TasksApi - factory interface
 * @export
 */
export const TasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TasksApiFp(configuration)
    return {
        /**
         * Delete a task by Id
         * @summary Delete By ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiAuthenticatedTasksId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiAuthenticatedTasksId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all tasks on the API
         * @summary Get All
         * @param {number} page 
         * @param {number} limit 
         * @param {string} [expand] 
         * @param {string} [embed] 
         * @param {string} [q] 
         * @param {string} [boardMemberId] 
         * @param {string} [boardColumnId] 
         * @param {string} [sort] 
         * @param {string} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAuthenticatedTasks(page: number, limit: number, expand?: string, embed?: string, q?: string, boardMemberId?: string, boardColumnId?: string, sort?: string, order?: string, options?: any): AxiosPromise<TaskListResponse> {
            return localVarFp.getApiAuthenticatedTasks(page, limit, expand, embed, q, boardMemberId, boardColumnId, sort, order, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a task by Id
         * @summary Get By ID
         * @param {string} id 
         * @param {string} [expand] 
         * @param {string} [embed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAuthenticatedTasksId(id: string, expand?: string, embed?: string, options?: any): AxiosPromise<Task> {
            return localVarFp.getApiAuthenticatedTasksId(id, expand, embed, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a task by Id
         * @summary Update By ID
         * @param {string} id 
         * @param {UpdateTaskRequest} [updateTaskRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiAuthenticatedTasksId(id: string, updateTaskRequest?: UpdateTaskRequest, options?: any): AxiosPromise<Task> {
            return localVarFp.patchApiAuthenticatedTasksId(id, updateTaskRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new task
         * @summary Create
         * @param {CreateTaskRequest} [createTaskRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiAuthenticatedTasks(createTaskRequest?: CreateTaskRequest, options?: any): AxiosPromise<Task> {
            return localVarFp.postApiAuthenticatedTasks(createTaskRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TasksApi - interface
 * @export
 * @interface TasksApi
 */
export interface TasksApiInterface {
    /**
     * Delete a task by Id
     * @summary Delete By ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    deleteApiAuthenticatedTasksId(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get all tasks on the API
     * @summary Get All
     * @param {number} page 
     * @param {number} limit 
     * @param {string} [expand] 
     * @param {string} [embed] 
     * @param {string} [q] 
     * @param {string} [boardMemberId] 
     * @param {string} [boardColumnId] 
     * @param {string} [sort] 
     * @param {string} [order] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    getApiAuthenticatedTasks(page: number, limit: number, expand?: string, embed?: string, q?: string, boardMemberId?: string, boardColumnId?: string, sort?: string, order?: string, options?: AxiosRequestConfig): AxiosPromise<TaskListResponse>;

    /**
     * Get a task by Id
     * @summary Get By ID
     * @param {string} id 
     * @param {string} [expand] 
     * @param {string} [embed] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    getApiAuthenticatedTasksId(id: string, expand?: string, embed?: string, options?: AxiosRequestConfig): AxiosPromise<Task>;

    /**
     * Update a task by Id
     * @summary Update By ID
     * @param {string} id 
     * @param {UpdateTaskRequest} [updateTaskRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    patchApiAuthenticatedTasksId(id: string, updateTaskRequest?: UpdateTaskRequest, options?: AxiosRequestConfig): AxiosPromise<Task>;

    /**
     * Create a new task
     * @summary Create
     * @param {CreateTaskRequest} [createTaskRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    postApiAuthenticatedTasks(createTaskRequest?: CreateTaskRequest, options?: AxiosRequestConfig): AxiosPromise<Task>;

}

/**
 * TasksApi - object-oriented interface
 * @export
 * @class TasksApi
 * @extends {BaseAPI}
 */
export class TasksApi extends BaseAPI implements TasksApiInterface {
    /**
     * Delete a task by Id
     * @summary Delete By ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public deleteApiAuthenticatedTasksId(id: string, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).deleteApiAuthenticatedTasksId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all tasks on the API
     * @summary Get All
     * @param {number} page 
     * @param {number} limit 
     * @param {string} [expand] 
     * @param {string} [embed] 
     * @param {string} [q] 
     * @param {string} [boardMemberId] 
     * @param {string} [boardColumnId] 
     * @param {string} [sort] 
     * @param {string} [order] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public getApiAuthenticatedTasks(page: number, limit: number, expand?: string, embed?: string, q?: string, boardMemberId?: string, boardColumnId?: string, sort?: string, order?: string, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).getApiAuthenticatedTasks(page, limit, expand, embed, q, boardMemberId, boardColumnId, sort, order, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a task by Id
     * @summary Get By ID
     * @param {string} id 
     * @param {string} [expand] 
     * @param {string} [embed] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public getApiAuthenticatedTasksId(id: string, expand?: string, embed?: string, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).getApiAuthenticatedTasksId(id, expand, embed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a task by Id
     * @summary Update By ID
     * @param {string} id 
     * @param {UpdateTaskRequest} [updateTaskRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public patchApiAuthenticatedTasksId(id: string, updateTaskRequest?: UpdateTaskRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).patchApiAuthenticatedTasksId(id, updateTaskRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new task
     * @summary Create
     * @param {CreateTaskRequest} [createTaskRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public postApiAuthenticatedTasks(createTaskRequest?: CreateTaskRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).postApiAuthenticatedTasks(createTaskRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

